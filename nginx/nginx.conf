upstream frontend {
    server frontend:3000;
}

upstream api {
    server api:8000;
}

server {

    listen 80;
    
    # ЕСЛИ ВОЗНИКАЕТ ОШИБКА "...strict MIME checking is enabled", ТО ДОБАВИТЬ ЭТУ СТРОКУ
    default_type mime-type;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    location / {
        index  index.html;
        proxy_pass http://frontend;
    }

    location /sockjs-node {
        proxy_pass http://frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }
      
    location /api {
        # СУДЯ ПО ВСЕМУ ДЕЛАЕТ ТАК, ЧТО ПРИ ПОПЫТКЕ ОБРАТИТЬСЯ ПО ЭТОМУ АДРЕСУ, ОБРЫВАЕТ ДОСТУП К ССЫЛКЕ
        rewrite /api/(.*) /$1 break;
        proxy_pass http://api;
    }

    location /static {
        autoindex on;

        # ЕСЛИ NGINX ПРИ ОТКРЫТИИ НЕ ВИДИТ STATIC, ТО НАДО УКАЗАТЬ, ГДЕ СТАТИКУ ВИДНО 
        proxy_pass http://frontend;
        alias /usr/src/api/static;
    }

    # location /media/ {
    #     alias /home/app/web/mediafiles/;
    # }

}

# Adding the two apps upstreams - the client and the server API. Adding the ports assigned to each app. An upstream module is used to define a group of servers that the proxy pass can reference.
# Creating our main config, which is the Nginx server listening to port 80.
# Adding the location /. / will redirect to the client-server.
# Note that, we are setting proxy_pass as http://client. The client is the name of the service that we will configure in our docker-compose.yml file to power up the client React application.

# Adding the location /sockjs-node for the client to make the web sockets connection and connect to the server. We should define the sockjs-node path here.
# Adding the location /api. Remember we added this to the Axios requests URLs. This will redirect to the Node.js back-end.
# api/anything should redirect to the parameter /$1, which is any section of our Node.js routes such as /get.